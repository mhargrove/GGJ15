<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.map_width = 16;//get_integer("Width? (MAX: 10000)", 16);
global.map_height = 12;//get_integer("Height? (MAX: 10000)", 12);
global.show_grid = true;
var i, j;
for (i = 0; i &lt; global.map_width; i += 1)
{
    for (j = 0; j &lt; global.map_height; j += 1)
    {
        global.map_tiles[i, j] = 0;
        global.map_objects[i, j] = 0;
    }
}

global.cam_x = 0;
global.cam_y = 0;

draw_set_font(fnt_main);

global.tool_type = "TILES";
global.tool_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_left))
{
    if (global.cam_x &gt; 0) global.cam_x -= 1;
}

if (keyboard_check_pressed(vk_right))
{
    if (global.cam_x &lt; global.map_width - 16) global.cam_x += 1;
}

if (keyboard_check_pressed(vk_up))
{
    if (global.cam_y &gt; 0) global.cam_y -= 1;
}

if (keyboard_check_pressed(vk_down))
{
    if (global.cam_y &lt; global.map_height - 12) global.cam_y += 1;
}

if (keyboard_check_pressed(ord('N')) &amp;&amp; keyboard_check(vk_control))
{
    global.map_width = get_integer("Width? (MAX: 10000)", 16);
    global.map_height = get_integer("Height? (MAX: 10000)", 12);
    var i, j;
    for (i = 0; i &lt; global.map_width; i += 1)
    {
        for (j = 0; j &lt; global.map_height; j += 1)
        {
            global.map_tiles[i, j] = 0;
            global.map_objects[i, j] = 0;
        }
    }

    global.cam_x = 0;
    global.cam_y = 0;


    global.tool_type = "TILES";
    global.tool_index = 0;
}

if (keyboard_check_pressed(ord('E')) &amp;&amp; keyboard_check(vk_control))
{
    var filename1, filename2, file1, file2, i, j;
    filename1 = get_save_filename(".tiles", "world.tiles");
    filename2 = get_save_filename(".objects", "world.objects");
    if (filename1 == "")
        show_message("Tiles save file not specified.");
    else
    {
        file1 = file_text_open_write(filename1);
        
        file_text_write_string(file1, string(global.map_width) + " " + string(global.map_height) + " ");
        file_text_writeln(file1);
        
        for (j = 0; j &lt; global.map_height; j += 1)
        {
            for (i = 0; i &lt; global.map_width; i += 1)
            {
                file_text_write_string(file1, string(global.map_tiles[i, j]) + "   ");
            }
            file_text_writeln(file1);
        }
        
        file_text_close(file1);
    }
    
    if (filename2 == "")
        show_message("Objects save file not specified. ");
    else
    {
        file2 = file_text_open_write(filename2);
        
        file_text_write_string(file2, string(global.map_width) + " " + string(global.map_height) + " ");
        file_text_writeln(file2);
        
        for (j = 0; j &lt; global.map_height; j += 1)
        {
            for (i = 0; i &lt; global.map_width; i += 1)
            {
                file_text_write_string(file2, string(global.map_objects[i, j]) + "   ");
            }
            file_text_writeln(file2);
        }
        
        file_text_close(file2);
    }
}

if (keyboard_check_pressed(ord('O')) &amp;&amp; keyboard_check(vk_control))
{
    var filename, file, i, j;
    filename = get_open_filename(".mapsave", "");
    if (filename == "")
        show_message("Cannot open tiles file specified");
    else
    {
        file = file_text_open_read(filename);
        global.map_width = file_text_read_real(file);
        global.map_height = file_text_read_real(file);
        file_text_readln(file);
        
        for (j = 0; j &lt; global.map_height; j += 1)
        {
            for (i = 0; i &lt; global.map_width; i += 1)
            {
                global.map_tiles[i, j] = file_text_read_real(file);
                global.map_objects[i, j] = file_text_read_real(file);
            }
            file_text_readln(file);
        }
        /*
        for (j = 0; j &lt; global.map_height; j += 1)
        {
            for (i = 0; i &lt; global.map_width; i += 1)
            {
                global.map_objects[i, j] = file_text_read_real(file);
            }
            file_text_readln(file);
        }
        */
        file_text_close(file);
    }
}

if (keyboard_check_pressed(ord('S')) &amp;&amp; keyboard_check(vk_control))
{
    var filename, file, i, j;
    filename = get_save_filename(".mapsave", "");
    if (filename == "")
        show_message("Cannot open tiles file specified");
    else
    {
        file = file_text_open_write(filename);
        
        file_text_write_string(file, string(global.map_width) + " " + string(global.map_height) + " ");
        file_text_writeln(file);
        
        for (j = 0; j &lt; global.map_height; j += 1)
        {
            for (i = 0; i &lt; global.map_width; i += 1)
            {
                file_text_write_string(file, string(global.map_tiles[i, j]) + "  ");
                file_text_write_string(file, string(global.map_objects[i, j]) + "  ");
            }
            file_text_writeln(file);
        }
        /*
        for (j = 0; j &lt; global.map_height; j += 1)
        {
            for (i = 0; i &lt; global.map_width; i += 1)
            {
                file_text_write_string(file, string(global.map_objects[i, j]) + "  ");
            }
            file_text_writeln(file);
        }
        */
        file_text_close(file);
    }
}

if (keyboard_check_pressed(ord('T')))
{
    global.tool_index = get_integer("Tool?", 0);
}

if (mouse_check_button(mb_left))
{
    if (global.tool_type == "TILES")
    {
        global.map_tiles[mouse_x div 32 + global.cam_x, mouse_y div 32 + global.cam_y] = global.tool_index;
    }
}

if (keyboard_check_pressed(ord('G')))
{
    global.show_grid = !global.show_grid;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i, j;
for (i = 0; i &lt; 16; i += 1)
{
    for (j = 0; j &lt; 12; j += 1)
    {
        draw_sprite(spr_tiles, global.map_tiles[global.cam_x + i, global.cam_y + j], 
                        i * 32, j * 32);
    }
}

for (i = 0; i &lt; 16; i += 1)
{
    for (j = 0; j &lt; 12; j += 1)
    {
        if (global.map_objects[global.cam_x + i, global.cam_y + j] != 0)
            draw_sprite(spr_foliage1x1, global.map_objects[global.cam_x + i, global.cam_y + j], 
                        i * 32, j * 32);
    }
}

draw_set_color(c_lime);
if (global.show_grid)
{
    for (i = 0; i &lt; 16; i += 1)
    {
        for (j = 0; j &lt; 12; j += 1)
        {
            // DRAW GRID
            draw_rectangle(i * 32, j * 32, i * 32 + 32, j * 32 + 32, true);
        }
    }
}

// DRAW HUD
draw_text(10, 390, "CAM_X: " + string(global.cam_x));
draw_text(10, 410, "CAM_Y: " + string(global.cam_y));
draw_text(160, 390, "MOUSE_X: " + string(mouse_x div 32 + global.cam_x));
draw_text(160, 410, "MOUSE_Y: " + string(mouse_y div 32 + global.cam_y));
if (mouse_x &gt;= 0 &amp;&amp; mouse_x &lt; 512 &amp;&amp; mouse_y &gt;= 0 &amp;&amp; mouse_y &lt;= 384)
{
    draw_text(310, 390, "TILE_ID: " + string(global.map_tiles[mouse_x div 32 + global.cam_x, mouse_y div 32 + global.cam_y]));
    draw_text(310, 410, "OBJECT_ID: undefined");//" + string());
}

draw_set_color(c_black);

if (mouse_x &gt;= 0 &amp;&amp; mouse_x &lt; 512 &amp;&amp; mouse_y &gt;= 0 &amp;&amp; mouse_y &lt;= 384)
{
    if (global.tool_type == "TILES")
    {   
        draw_sprite_ext(spr_tiles, global.tool_index, (mouse_x div 32) * 32, (mouse_y div 32) * 32, 1, 1, 0, c_lime, .5);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
